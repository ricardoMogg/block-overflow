// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title     String
  content      String
  walletAddress  String
  comments  Comment[]
  upvotes PostUpvote[]
  tags String[]
  bountyAmount Float?
  bountyId String?
  bountyStatus String?
  chosenCommentId String?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content      String
  walletAddress  String
  post      Post    @relation(fields: [postId], references: [id])
  postId    String  @db.ObjectId
  upvotes   CommentUpvote[]
}

model PostUpvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  post      Post    @relation(fields: [postId], references: [id])
  postId    String  @db.ObjectId
  walletAddress  String
  // unique index against postId and walletAddress
  @@unique([postId, walletAddress])
}

model CommentUpvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  comment      Comment    @relation(fields: [commentId], references: [id])
  commentId    String  @db.ObjectId
  walletAddress  String
  // unique index against commentId and walletAddress
  @@unique([commentId, walletAddress])
}